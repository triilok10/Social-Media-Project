@model Social_Media_Project.Models.Account

@{
    ViewData["Title"] = "Signup";
}

<link href="~/js/toastr.min.css" rel="stylesheet" />

@if (TempData["errorMessage"] != null)
{
    <script>
        toastr.error("@TempData["errorMessage"]");
    </script>
}
@if (TempData["successMessage"] != null)
{
    <script>
        toastr.success("@TempData["successMessage"]");
        $(document).ready(function () {
            $(".signup-form").addClass('d-none');
            $(".signUp-LoginBio").removeClass('d-none');
        });
    </script>
}

<div class="Signup-MarginAlign">
    <div class="Center-Mobile">
        <div class="signup-container">
            <div class="signup-form">
                <h2 class="signup-form-title">Sign Up</h2>
                <form asp-controller="Account" asp-action="Signup" method="post" id="SignUpForm">
                    <div class="signup-form-group">
                        <label asp-for="Phone">Mobile Number</label>
                        <input asp-for="Phone" id="Phone" name="Phone" class="form-control" placeholder="Mobile Number" required>
                        <input asp-for="hdnId" type="hidden" value="1">
                    </div>
                    <div class="signup-form-group">
                        <label asp-for="Email">Email Address</label>
                        <input asp-for="Email" id="Email" name="Email" class="form-control" placeholder="Email Address" required>
                    </div>
                    <div class="signup-form-group">
                        <label asp-for="Fullname">Full Name</label>
                        <input asp-for="Fullname" id="Fullname" name="Fullname" class="form-control" placeholder="Full Name" required>
                    </div>
                    <div class="signup-form-group">
                        <label asp-for="Username">Username</label>
                        <input asp-for="Username" id="Username" name="Username" class="form-control" placeholder="Username" required>
                    </div>
                    <div class="signup-form-group">
                        <label asp-for="Password">Password</label>
                        <input asp-for="Password" id="Password" name="Password" class="form-control" type="password" placeholder="Password" required>
                    </div>
                    <div class="signup-form-group">
                        <label asp-for="ConfirmPassword">Confirm Password</label>
                        <input asp-for="ConfirmPassword" id="ConfirmPassword" name="ConfirmPassword" class="form-control" type="password" placeholder="Confirm Password" required>
                    </div>
                    <input type="hidden" id="fcmToken" name="FcmToken" />
                    <div class="signup-form-group signup-Margin">
                        <button type="submit" class="btn-submit">Sign Up</button>
                    </div>
                    <div class="signup-form-social">
                        <p>Or sign up with</p>
                        <a href="#" class="btn btn-facebook">Facebook</a>
                    </div>
                </form>
                <div class="login-form-link">
                    <p>Already have an account? <a href="@Url.Action("Index","Home")">Log in</a></p>
                </div>
            </div>
            <div class="signUp-LoginBio d-none" id="SignUpBioForm">
                <form asp-controller="Account" asp-action="Signup" method="post" id="bioForm" enctype="multipart/form-data">
                    <input type="hidden" asp-for="Id" />
                    <div class="signup-form-LoginBio">
                        <h2 class="signup-form-title">Complete Your Profile</h2>
                        <div class="signup-form-group">
                            <label for="ProfilePhoto">Add Profile Photo</label>
                            <input type="file" asp-for="ProfilePhoto" id="ProfilePhotoInput" name="ProfilePhoto" class="form-control" onchange="previewProfilePhoto(event)">
                            <div class="previewImageAlign">
                                <img id="previewImage" class="preview-image" src="#" alt="Preview">
                            </div>
                        </div>
                        <div class="signup-form-group">
                            <label for="DateOfBirth">Date Of Birth</label>
                            <input type="date" asp-for="DateOfBirth" id="DateOfBirth" name="DateOfBirth" class="form-control">
                        </div>
                        <div class="signup-form-group">
                            <label for="Bio">Bio</label>
                            <textarea asp-for="Bio" id="Bio" name="Bio" rows="4" class="form-control" placeholder="Describe yourself"></textarea>
                        </div>
                        <div class="signup-form-group">
                            <button type="submit" class="btn-submit">Save</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script src="~/js/firebase-app.js"></script>
<script src="~/js/firebase-messaging.js"></script>
<script type="text/javascript">




    $(document).ready(function () {
        // Toastr options

        toastr.options = {
            "closeButton": false,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };

        // Form validation
        $("#SignUpForm").validate({
            rules: {
                Phone: { required: true },
                Email: { required: true, email: true },
                Fullname: { required: true },
                Username: { required: true },
                Password: { required: true, minlength: 6 },
                ConfirmPassword: { required: true, equalTo: "#Password" }
            },
            messages: {
                Phone: { required: "Please enter your phone number." },
                Email: { required: "Please enter your email address.", email: "Please enter a valid email address." },
                Fullname: { required: "Please enter your full name." },
                Username: { required: "Please enter a username." },
                Password: { required: "Please enter a password.", minlength: "Your password must be at least 6 characters long." },
                ConfirmPassword: { required: "Please confirm your password.", equalTo: "Passwords do not match." }
            },
            errorElement: 'span',
            errorPlacement: function (error, element) {
                error.addClass('invalid-feedback');
                element.closest('.signup-form-group').append(error);
            },
            highlight: function (element, errorClass, validClass) {
                $(element).addClass('is-invalid').removeClass('is-valid');
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).removeClass('is-invalid').addClass('is-valid');
            }
        });
    });

    function previewProfilePhoto(event) {
        var input = event.target;
        var preview = document.getElementById('previewImage');

        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                preview.src = e.target.result;
                preview.style.display = 'block';
            }

            reader.readAsDataURL(input.files[0]);
        }
    }


    const firebaseConfig = {
        apiKey: "AIzaSyBpvaTISi5cJLmO71U4PsvDgLlGhFYlk70",
        authDomain: "socialmediaproject-60457.firebaseapp.com",
        projectId: "socialmediaproject-60457",
        storageBucket: "socialmediaproject-60457.appspot.com",
        messagingSenderId: "492049714309",
        appId: "1:492049714309:web:8c603d2416bff737f5adec"
    };

    // Initialize Firebase
    firebase.initializeApp(firebaseConfig);

    // Initialize Firebase Cloud Messaging and request permission
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('/js/firebase-messaging-sw.js')
            .then((registration) => {
                console.log('Service Worker registered with scope:', registration.scope);
                const messaging = firebase.messaging();
                messaging.useServiceWorker(registration);

                // Delete the existing token (if any) and then request a new one
                messaging.getToken().then((currentToken) => {
                    if (currentToken) {
                        messaging.deleteToken(currentToken).then(() => {
                            console.log('Existing FCM Token deleted, requesting a new token...');
                            requestNewToken(messaging);
                        }).catch((err) => {
                            console.error('Error deleting existing FCM token:', err);
                        });
                    } else {
                        requestNewToken(messaging);
                    }
                }).catch((err) => {
                    console.error('Error getting current FCM token:', err);
                });

                function requestNewToken(messaging) {
                    messaging.requestPermission()
                        .then(() => {
                            return messaging.getToken();
                        })
                        .then((token) => {
                            console.log('New FCM Token:', token);
                            $('#fcmToken').val(token);
                            // Send the token to your server
                        })
                        .catch((err) => {
                            console.error('Permission denied or error getting token', err);
                        });
                }

                // Handle token refresh
                messaging.onTokenRefresh(() => {
                    messaging.getToken()
                        .then((refreshedToken) => {
                            console.log('Token refreshed:', refreshedToken);
                            $('#fcmToken').val(refreshedToken);
                            // Send the refreshed token to your server
                        })
                        .catch((err) => {
                            console.error('Error refreshing token:', err);
                        });
                });
            })
            .catch((err) => {
                console.error('Service Worker registration failed:', err);
            });
    }





</script>
